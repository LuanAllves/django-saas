Esse documento é destinado a anotações sobre o sistema, o que auxiliará em futuras manutenções.

1 - Sobre a criações do apps.
    1.1 - Um app nada mais é que uma parte do seu sistema que cuida de uma area especifica, exemplo:
        1.1.1 - Nesse sistemas temos alguns apps, são eles: core e accounts:
        1.1.2 - Core -> Cuida da primeira pagina de contato com o cliente (LandPage)
        1.1.3 - Accounts -> Cuida das paginas de Login, Registro e Logout do sistema.

    1.2 - Para criar um app novo, use o comando: py manage.py createapp "nome do app"
        1.2.1 - Lembre-se de estar com o ambiente virtual ativo, caso contrario o mesmo pode levar a erros.
        1.2.2 - Outra observação importante é que este comando é para ser usado no sistema Windows, verifique o comando correto para o seu OS

    1.3 - Como criar e ativar o ambiente virtual:
        1.3.1 - No Windows: 
            1.3.1.1 - py -m venv meu_ambiente
            1.3.1.2 - meu_ambiente/scripts/activate
        
        1.3.2 - No MacOS e Linux:
            1.3.2.1 - python3 -m venv meu_ambiente
            1.3.2.2 - meu_ambiente/bin/activate

        1.3.3 - Observação importante, em "meu_ambiente", pode ser qualquer nome que desejar, mas, por padrão é uma boa pratica usar ".venv" ou somente "venv".

2 - Sobre o fluxograma do Django.
    2.1 - fluxograma detalhado:
        1. - Requisição do Cliente:
            O usuário digita uma URL no navegador ou clica em um link, fazendo uma requisição HTTP.

        2. ROOT_URLCONF:
            Django procura a configuração ROOT_URLCONF no arquivo settings.py para identificar o arquivo de padrões de URL a ser usado.

        3. Roteamento (URL Dispatcher):
            Django compara a URL recebida com os padrões definidos no arquivo de URLs.

        4. View:
            Se uma correspondência é encontrada, Django chama a função ou classe de view associada ao padrão URL.

        5. Model (Opcional):
            A view pode interagir com o modelo (base de dados) para buscar ou manipular dados.

        6. Template (Opcional):
            A view renderiza um template HTML com os dados obtidos, criando a resposta.

        7. Resposta:
            Django envia a resposta HTML renderizada de volta ao navegador do usuário. 
    
    2.2 - Componentes Importantes:
        URLs: Arquivo que define os padrões de URL e associa cada padrão a uma view.
        Views: Funções ou classes que processam as requisições e retornam respostas.
        Modelos: Representam a estrutura de dados e interagem com o banco de dados.
        Templates: Arquivos HTML que são preenchidos com dados para gerar a resposta final. 

    2.3 - Observação:
        Django usa uma arquitetura Model-View-Template (MVT), onde cada componente desempenha um papel específico.